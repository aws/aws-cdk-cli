"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.integTestWorker = integTestWorker;
exports.watchTestWorker = watchTestWorker;
exports.snapshotTestWorker = snapshotTestWorker;
const workerpool = require("workerpool");
const runner_1 = require("../../runner");
const integration_tests_1 = require("../../runner/integration-tests");
const common_1 = require("../common");
/**
 * Runs a single integration test batch request.
 * If the test does not have an existing snapshot,
 * this will first generate a snapshot and then execute
 * the integration tests.
 *
 * If the tests succeed it will then save the snapshot
 */
function integTestWorker(request) {
    const failures = [];
    const verbosity = request.verbosity ?? 0;
    for (const testInfo of request.tests) {
        const test = new integration_tests_1.IntegTest({
            ...testInfo,
            watch: request.watch,
        }); // Hydrate from data
        const start = Date.now();
        try {
            const runner = new runner_1.IntegTestRunner({
                test,
                profile: request.profile,
                env: {
                    AWS_REGION: request.region,
                    CDK_DOCKER: process.env.CDK_DOCKER ?? 'docker',
                },
                showOutput: verbosity >= 2,
            }, testInfo.destructiveChanges);
            const tests = runner.actualTests();
            if (!tests || Object.keys(tests).length === 0) {
                throw new Error(`No tests defined for ${runner.testName}`);
            }
            for (const testCaseName of Object.keys(tests)) {
                try {
                    const results = runner.runIntegTestCase({
                        testCaseName,
                        clean: request.clean,
                        dryRun: request.dryRun,
                        updateWorkflow: request.updateWorkflow,
                        verbosity,
                    });
                    if (results && Object.values(results).some(result => result.status === 'fail')) {
                        failures.push(testInfo);
                        workerpool.workerEmit({
                            reason: common_1.DiagnosticReason.ASSERTION_FAILED,
                            testName: `${runner.testName}-${testCaseName} (${request.profile}/${request.region})`,
                            message: (0, common_1.formatAssertionResults)(results),
                            duration: (Date.now() - start) / 1000,
                        });
                    }
                    else {
                        workerpool.workerEmit({
                            reason: common_1.DiagnosticReason.TEST_SUCCESS,
                            testName: `${runner.testName}-${testCaseName}`,
                            message: results ? (0, common_1.formatAssertionResults)(results) : 'NO ASSERTIONS',
                            duration: (Date.now() - start) / 1000,
                        });
                    }
                }
                catch (e) {
                    failures.push(testInfo);
                    workerpool.workerEmit({
                        reason: common_1.DiagnosticReason.TEST_FAILED,
                        testName: `${runner.testName}-${testCaseName} (${request.profile}/${request.region})`,
                        message: `Integration test failed: ${e}`,
                        duration: (Date.now() - start) / 1000,
                    });
                }
            }
        }
        catch (e) {
            failures.push(testInfo);
            workerpool.workerEmit({
                reason: common_1.DiagnosticReason.TEST_ERROR,
                testName: `${testInfo.fileName} (${request.profile}/${request.region})`,
                message: `Error during integration test: ${e}`,
                duration: (Date.now() - start) / 1000,
            });
        }
    }
    return failures;
}
async function watchTestWorker(options) {
    const verbosity = options.verbosity ?? 0;
    const test = new integration_tests_1.IntegTest(options);
    const runner = new runner_1.IntegTestRunner({
        test,
        profile: options.profile,
        env: {
            AWS_REGION: options.region,
            CDK_DOCKER: process.env.CDK_DOCKER ?? 'docker',
        },
        showOutput: verbosity >= 2,
    });
    runner.createCdkContextJson();
    const tests = runner.actualTests();
    if (!tests || Object.keys(tests).length === 0) {
        throw new Error(`No tests defined for ${runner.testName}`);
    }
    for (const testCaseName of Object.keys(tests)) {
        await runner.watchIntegTest({
            testCaseName,
            verbosity,
        });
    }
}
/**
 * Runs a single snapshot test batch request.
 * For each integration test this will check to see
 * if there is an existing snapshot, and if there is will
 * check if there are any changes
 */
function snapshotTestWorker(testInfo, options = {}) {
    const failedTests = new Array();
    const start = Date.now();
    const test = new integration_tests_1.IntegTest(testInfo); // Hydrate the data record again
    const timer = setTimeout(() => {
        workerpool.workerEmit({
            reason: common_1.DiagnosticReason.SNAPSHOT_ERROR,
            testName: test.testName,
            message: 'Test is taking a very long time',
            duration: (Date.now() - start) / 1000,
        });
    }, 60000);
    try {
        const runner = new runner_1.IntegSnapshotRunner({ test });
        if (!runner.hasSnapshot()) {
            workerpool.workerEmit({
                reason: common_1.DiagnosticReason.NO_SNAPSHOT,
                testName: test.testName,
                message: 'No Snapshot',
                duration: (Date.now() - start) / 1000,
            });
            failedTests.push(test.info);
        }
        else {
            const { diagnostics, destructiveChanges } = runner.testSnapshot(options);
            if (diagnostics.length > 0) {
                diagnostics.forEach(diagnostic => workerpool.workerEmit({
                    ...diagnostic,
                    duration: (Date.now() - start) / 1000,
                }));
                failedTests.push({
                    ...test.info,
                    destructiveChanges,
                });
            }
            else {
                workerpool.workerEmit({
                    reason: common_1.DiagnosticReason.SNAPSHOT_SUCCESS,
                    testName: test.testName,
                    message: 'Success',
                    duration: (Date.now() - start) / 1000,
                });
            }
        }
    }
    catch (e) {
        failedTests.push(test.info);
        workerpool.workerEmit({
            message: e.message,
            testName: test.testName,
            reason: common_1.DiagnosticReason.SNAPSHOT_ERROR,
            duration: (Date.now() - start) / 1000,
        });
    }
    finally {
        clearTimeout(timer);
    }
    return failedTests;
}
workerpool.worker({
    snapshotTestWorker,
    integTestWorker,
    watchTestWorker,
});
//# sourceMappingURL=data:application/json;base64,